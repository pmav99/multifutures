[tool.poetry]
name = "multifutures"
version = "0.0.0"
description = ""
authors = ["Panos Mavrogiorgos <pmav99@gmail.com>"]
readme = "README.md"

[tool.poetry.dependencies]
python = ">=3.9, <4.0"
limits = "*"
pydantic = ">2"
tqdm = "*"
anyio = "*"

[tool.poetry.group.dev.dependencies]
pytest = "*"
pytest-cov = "*"
mypy = "*"
types-tqdm = "*"
covdefaults = "*"
ipdb = "*"

[tool.poetry-dynamic-versioning]
enable = true
dirty = false

[build-system]
requires = [
    "poetry-core>=1.0.0",
    "poetry-dynamic-versioning",
]
build-backend = "poetry_dynamic_versioning.backend"

[tool.mypy]
python_version = "3.10"
plugins = ["pydantic.mypy"]
show_error_codes = true
show_column_numbers = true
show_error_context = true
warn_no_return = true
warn_redundant_casts = true
warn_return_any = true
warn_unreachable = true
warn_unused_ignores = true
strict = true
ignore_missing_imports = true
disable_error_code = [ ]

# mypy per-module options:
[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = true

[tool.pydantic-mypy]
init_forbid_extra = true
init_typed = true
warn_required_dynamic_aliases = true
warn_untyped_fields = true

[tool.black]
target-version = ["py310"]
line-length = 120
skip-string-normalization = true

[tool.ruff]
target-version = "py310"
line-length = 120
select = [
  "ARG",  # flake8-unused-argument
  "B",  # flake8-bugbear
  "C4",  # flake8-comprehensions
  "C90",  # mccabe
  "COM",  # flake8-commas
  # "D",  # pydocstyle
  "DTZ",  # flake8-datetimez
  "E",  # pycodestyle
  "EXE",  # flake8-executable
  "FA",  # flake8-future-annotations
  "FBT",  # flake8-boolean-trap
  "F",  # pyflakes
  "ICN",  # flake8-import-conventions
  # "I",  # isort
  "ISC",  # flake8-implicit-str-concat
  "N",  # pep8-naming
  "PL",  # Pylint
  "Q",  # flake8-quotes
  "RUF",  # Unused noqa
  "S",  # flake8-bandit
  "TID",  # flake8-tidy-imports
  "T",  # pyupgrade
  "T10",  # flake8-debugger
  "UP",  # pyupgrade
  "W",  # Warning
  "YTT",  # flake8-2020
]
ignore = [
  "N812",  # lowercase-imported-as-non-lowercase
  "PLR0913",  # too-many-arguments
  "S101",  # assert
]
unfixable = [
  "F401",  # Don't touch unused imports
]


[tool.coverage.run]
plugins = ["covdefaults"]
source = ["multifutures"]
concurrency = [
  "multiprocessing",
  "thread",
]
parallel = true
sigterm = true

[tool.coverage.report]
fail_under = 90.0
exclude_lines = [
    'pragma: no cover',
    'raise NotImplementedError',
    'if TYPE_CHECKING:',
    'if typing.TYPE_CHECKING:',
    '@overload',
    '@typing.overload',
    '\(Protocol\):$',
    'typing.assert_never',
    'assert_never',
]
